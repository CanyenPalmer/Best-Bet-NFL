"""
nfl_bet_predictor.py

Predicts:
1) NFL Win Predictions (Team vs Team)
2) NFL Player Bet Predictions
3) NFL Parlay Predictions

Requires:
- pandas
- openpyxl
"""

import pandas as pd

# 1️⃣ Config
EXCEL_FILENAME = "nft_team_sheet.xlsx"  # Updated to match your file

# 2️⃣ Load Data
def load_team_data():
    print(f"Loading team data from {EXCEL_FILENAME}...")
    df = pd.read_excel(EXCEL_FILENAME)
    print("Data loaded successfully.\n")
    return df

# 3️⃣ NFL Win Predictions (Team vs Team)
def predict_game_winner(df, team1, team2):
    """
    Predicts winner using Offense vs Opponent Defense ratings.
    """
    print(f"Predicting winner between {team1} and {team2}...")

    try:
        t1 = df[df['Team'].str.lower() == team1.lower()].iloc[0]
        t2 = df[df['Team'].str.lower() == team2.lower()].iloc[0]
    except IndexError:
        print(f"Error: One of the teams not found in the dataset.\n")
        return None

    t1_score = t1['OffenseRating'] - t2['DefenseRating']
    t2_score = t2['OffenseRating'] - t1['DefenseRating']

    print(f"{team1} Adjusted Score: {t1_score}")
    print(f"{team2} Adjusted Score: {t2_score}")

    if t1_score > t2_score:
        winner = team1
    elif t2_score > t1_score:
        winner = team2
    else:
        winner = "Tie"

    print(f"Predicted Winner: {winner}\n")
    return winner

# 4️⃣ NFL Player Bet Predictions (Sample Logic)
def predict_player_prop(player_stats):
    """
    Rules-based player prop prediction.
    """
    print(f"Predicting player prop for {player_stats['Name']}...")
    line = player_stats['BetLine']
    avg = player_stats['AverageStat']

    print(f"Bet Line: {line}, Player Average: {avg}")

    if avg > line * 1.05:
        prediction = "OVER"
    elif avg < line * 0.95:
        prediction = "UNDER"
    else:
        prediction = "NO BET"

    print(f"Prediction: {prediction}\n")
    return prediction

# 5️⃣ Parlay Prediction
def predict_parlay(win_preds, player_preds):
    """
    Estimate probability of hitting a parlay based on assumed odds.
    """
    print("Calculating Parlay Probability...")

    win_prob = 0.65
    player_prob = 0.60

    win_count = sum(1 for p in win_preds if p not in [None, "Tie"])
    player_count = sum(1 for p in player_preds if p in ["OVER", "UNDER"])

    combined_prob = (win_prob ** win_count) * (player_prob ** player_count)

    print(f"Win Bets: {win_count}, Player Bets: {player_count}")
    print(f"Estimated Parlay Success Probability: {combined_prob*100:.2f}%\n")
    return combined_prob

# 6️⃣ Main Function
def main():
    # Load the Excel data
    df = load_team_data()

    # Game Predictions
    team_matchups = [("Eagles", "Cowboys"), ("Chiefs", "Bills"), ("49ers", "Ravens")]
    win_preds = []
    for t1, t2 in team_matchups:
        winner = predict_game_winner(df, t1, t2)
        win_preds.append(winner)

    # Sample Player Bets
    player_data = [
        {"Name": "Josh Allen", "BetLine": 260.0, "AverageStat": 278.4},
        {"Name": "Nick Chubb", "BetLine": 85.5, "AverageStat": 91.2},
        {"Name": "Tyreek Hill", "BetLine": 95.0, "AverageStat": 92.3},
    ]

    player_preds = []
    for p in player_data:
        result = predict_player_prop(p)
        player_preds.append(result)

    # Combine into a Parlay Estimate
    predict_parlay(win_preds, player_preds)

if __name__ == "__main__":
    main()

